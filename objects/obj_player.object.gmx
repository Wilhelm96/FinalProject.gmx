<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sp_player_stand</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>sp_player_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables

grav = 1;
spd = 8;
jspd = 14;
hspd = 0;
vspd = 0;

gamepad_set_axis_deadzone(0, 0.3);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player Movement and Collision

var rkey = keyboard_check(vk_right) || keyboard_check(ord("D")) || (gamepad_axis_value(0, gp_axislh) &gt; 0);
var lkey = keyboard_check(vk_left) || keyboard_check(ord("A")) || (gamepad_axis_value(0, gp_axislh) &lt; 0);
var jkey = keyboard_check(vk_up) || keyboard_check(ord("W")) || (gamepad_button_check(0, gp_face1));

var rstick = (gamepad_axis_value(0, gp_axislh) &gt; 0);
var lstick = (gamepad_axis_value(0, gp_axislh) &lt; 0);
var jbutton = (gamepad_button_check(0, gp_face1));

// Check for Ground
if (place_meeting (x, y+1, obj_level_solid)) {
    vspd = 0;
    
    // Jump
    if (jkey) {
        vspd = -jspd;
    }
} else {
    // Gravity
    if (vspd &lt; 10) {
        vspd += grav;
    }
    
    if ((keyboard_check_released(jkey)) &amp;&amp; vspd &lt; -4) {
        vspd = -4;
    }
}

// Move Right
if (rkey) {
    hspd = spd;
    
    //Jump Off Left Wall
    if ((place_meeting(x-1, y, obj_level_solid) &amp;&amp; !place_meeting(x, y+1, obj_level_solid) &amp;&amp; !lkey)) {
        vspd = -jspd;
    }
}

// Move Left
if (lkey) {
    hspd = -spd;
    
    //Jump Off Right Wall
    if ((place_meeting(x+1, y, obj_level_solid) &amp;&amp; !place_meeting(x, y+1, obj_level_solid) &amp;&amp; !rkey)) {
        vspd = -jspd;
    }
}

// Check for not Moving
if ((!rkey &amp;&amp; !lkey) || (rkey &amp;&amp; lkey)) {
    hspd = 0;
}        
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>scr_physics</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///View Following

//Center On Player
//view_xview = x - view_wview/2 - 10;
//view_yview = y - view_hview/2 - 10;

//Clamp to Room
//view_xview = clamp(view_xview, 0, room_width - view_wview);
//view_yview = clamp(view_yview, 0, room_height - view_hview);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision on Spikes
//var player = instance_place(x, y, obj_player);

//Horrizontal
if (place_meeting (x+hspd, y, obj_level_spike)) {
    scr_death();
}

//Vertical
if (place_meeting (x, y+vspd, obj_level_spike)) {
    scr_death();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Talk to NPC

var tkey = keyboard_check_pressed(vk_down) || keyboard_check_pressed(ord("E")) || (gamepad_button_check_pressed(0, gp_face3));

if (tkey) {
    var speaker = instance_place(x, y, obj_speaker)
    if (speaker != noone) {
        with (speaker) {
            if (!instance_exists(dialogue)) {
                dialogue = instance_create(x+xoffset, y+yoffset, obj_dialogue);
                dialogue.text = text;
            } else {
                dialogue.text_page++;
                dialogue.text_count = 0;
                if (dialogue.text_page &gt; array_length_1d(dialogue.text)-1) {
                    with (dialogue) {
                        instance_destroy();
                    }
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_end_game">
      <action>
        <libid>1</libid>
        <id>224</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_another_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>11</kind>
            <room>rm_endcard</room>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_level_next">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Next Level

if room_next(room) != -1
{
   room_goto(room_next(room));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
